// Code generated by goctl. DO NOT EDIT.
package notification

import (
	"context"
	"time"

	"github.com/zeromicro/go-zero/core/stores/monc"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"

	"github.com/xh-polaris/meowchat-system/biz/infrastructure/consts"
	"github.com/xh-polaris/meowchat-system/biz/infrastructure/data/db"
	"github.com/xh-polaris/meowchat-system/biz/infrastructure/mapper"
)

var prefixNotificationCacheKey = "cache:notification:"

type notificationModel interface {
	Insert(ctx context.Context, data *db.Notification) error
	FindOne(ctx context.Context, id string) (*db.Notification, error)
	Update(ctx context.Context, data *db.Notification) error
}

type defaultNotificationModel struct {
	conn *monc.Model
}

func newDefaultNotificationModel(conn *monc.Model) *defaultNotificationModel {
	return &defaultNotificationModel{conn: conn}
}

func (m *defaultNotificationModel) Insert(ctx context.Context, data *db.Notification) error {
	if data.NotificationId.IsZero() {
		data.NotificationId = primitive.NewObjectID()
		data.CreateAt = time.Now()
		data.UpdateAt = time.Now()
	}

	key := prefixNotificationCacheKey + data.NotificationId.Hex()
	_, err := m.conn.InsertOne(ctx, key, data)
	return err
}

func (m *defaultNotificationModel) FindOne(ctx context.Context, id string) (*db.Notification, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, mapper.ErrInvalidObjectId
	}

	var data db.Notification
	key := prefixNotificationCacheKey + id
	err = m.conn.FindOne(ctx, key, &data, bson.M{"userId": oid})
	switch err {
	case nil:
		return &data, nil
	case monc.ErrNotFound:
		return nil, mapper.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNotificationModel) Update(ctx context.Context, data *db.Notification) error {
	key := prefixNotificationCacheKey + data.NotificationId.Hex()
	_, err := m.conn.UpdateOne(ctx, key, bson.M{consts.NotificationId: data.NotificationId}, bson.M{"$set": data})
	return err
}
