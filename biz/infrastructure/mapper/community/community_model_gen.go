// Code generated by goctl. DO NOT EDIT.
package community

import (
	"context"
	"github.com/xh-polaris/meowchat-system/biz/infrastructure/data/db"
	"github.com/xh-polaris/meowchat-system/biz/infrastructure/mapper"

	"time"

	"github.com/zeromicro/go-zero/core/stores/monc"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

var prefixCommunityCacheKey = "cache:community:"

type communityModel interface {
	Insert(ctx context.Context, data *db.Community) error
	FindOne(ctx context.Context, id string) (*db.Community, error)
	Update(ctx context.Context, data *db.Community) (*mongo.UpdateResult, error)
	Delete(ctx context.Context, id string) (int64, error)
}

type defaultCommunityModel struct {
	conn *monc.Model
}

func newDefaultCommunityModel(conn *monc.Model) *defaultCommunityModel {
	return &defaultCommunityModel{conn: conn}
}

func (m *defaultCommunityModel) Insert(ctx context.Context, data *db.Community) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
		data.CreateAt = time.Now()
		data.UpdateAt = time.Now()
	}

	key := prefixCommunityCacheKey + data.ID.Hex()
	_, err := m.conn.InsertOne(ctx, key, data)
	return err
}

func (m *defaultCommunityModel) FindOne(ctx context.Context, id string) (*db.Community, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, mapper.ErrInvalidObjectId
	}

	var data db.Community
	key := prefixCommunityCacheKey + id
	err = m.conn.FindOne(ctx, key, &data, bson.M{"_id": oid})
	switch err {
	case nil:
		return &data, nil
	case monc.ErrNotFound:
		return nil, mapper.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommunityModel) Update(ctx context.Context, data *db.Community) (*mongo.UpdateResult, error) {
	data.UpdateAt = time.Now()
	key := prefixCommunityCacheKey + data.ID.Hex()
	res, err := m.conn.UpdateOne(ctx, key, bson.M{"_id": data.ID}, bson.M{"$set": data})
	return res, err
}

func (m *defaultCommunityModel) Delete(ctx context.Context, id string) (int64, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return 0, mapper.ErrInvalidObjectId
	}
	key := prefixCommunityCacheKey + id
	res, err := m.conn.DeleteOne(ctx, key, bson.M{"_id": oid})
	return res, err
}
